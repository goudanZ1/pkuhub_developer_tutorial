#set text(font: (
  (name: "Arial", covers: "latin-in-cjk"), // 西文字体
  "DengXian" // 中文字体
), lang: "zh")

大家晚上好, 特别感谢大家能在端午佳节放弃休息时间来参加我们的技术讲座. 也感谢大家对我们团队工作的支持. 报名我们讲座和想加入我们团队的同学数量和热情程度也超出了我们的预期, 所以我们做的准备呢也格外认真, 力争能够给大家带来有价值且贴近最一线开发实际情况的内容. 

那我先自我介绍一下, 我是今天第一次讲座的讲者, 信息科学技术学院的在读本科生徐靖, 现在是大三, 也是我们团队的技术负责人. 出于某些原因呢, 今天线下我们是比较纯粹的技术讲座, 不能对某个网站做具体介绍. 后面需要的时候呢我就以 "某笔记平台" 来代称.

我们的讲座群呢大家应该都进了, 我们的讲座信息和资料都会在群里同步, 我们也希望呢这个能成为现阶段的一个交流平台, 大家可以自由地在里面提问和交流. 关于某笔记平台的项目和信息呢, 我们后面考虑单独录个视频或者线上介绍一下, 那今天最后也会有一个提问环节. 我们现在呢先回到讲座上来. 

今天讲座一些基本的信息我们群里已经说的比较清楚了. 我再简单重申一下. 那我们今天的主题关于 Vscode 和 Git, 这两个现代软件开发中不可或缺的基础设施. 其中 Git 的内容也被称为 The Missing Semester of Your CS Education. 国内目前不会在课上或者说培养方案上教这个东西, 但他又是从在坐的大部分同学的阶段, 也就是初步掌握了一到两门编程语言. 到上手实际项目的开发, 这之间的一个必修的内容. 那在今天的讲座中, 我会尽量用通俗易懂的方式来介绍这两个工具的基本概念和使用方法, 让大家能够在实际开发中得心应手. 并且用个人学术主页的部署这一项实践来串联. 在介绍这部分之前, 我简单分享一点我对于开发的理解, 关于如何去学习或者说掌握开发的技能.

== 关于系列讲座
那关于我们系列讲座的安排, 我也简单介绍一下. 
首先, 内容会侧重基础知识和实践操作, 所以强烈建议大家带上电脑跟着操作, 效果会更好。[停顿]
我们的目标是帮助大家快速掌握高年级常用的技术栈, 学完就能上手实际开发。[停顿]
如果学习顺利, 暑假还有机会参与合作项目——比如某笔记平台的重构, 或者其他实战项目。[停顿]
最重要的一点是:这个系列完全自由参与, 随时加入或退出都不会有压力。[停顿]

( 指向右侧网格布局）
关于课程安排:左边是具体主题——
• VS Code和Git由徐靖讲解
• Linux与Web部署由一位神秘开发者负责
• AI辅助编程由另一位神秘大牛教学

Linux 上服务器
前三讲必修

• 而Rust系列课程正在筹备中...[停顿]

( 指向左侧色块）
可能有同学会问:为什么学Rust? [停顿]
因为它代表现代编程语言的前沿方向, [手势强调]
• 微软、谷歌等大厂已全面采用
• 我们的操作系统课和Rust程序设计课也会直接应用

== 对开发的理解
那接下来我来谈谈对开发的理解
=== 技术栈
( 幻灯片2:对开发的理解 - 技术栈）
如果我从一个项目, 一个软件的角度看
现代技术栈分层构建:[停顿]
- 最底层是数据层: 比如某笔记平台需要去存储用户和笔记数据, 一类是结构比较严谨, 遵循某一套模式的关系型数据库, 另一类相对自由一点 
- 往上走是后端: 运行环境如Node.js/Python, 框架比如Spring或Flask , 某笔记平台呢用的就是 python flask, 原因呢只是因为大家更熟悉python. 这个的效率其实不高因此我们后面会去重构. 
- 接着是前端: 基础三件套HTML/CSS/JS, 加上React/Vue等框架

之前问卷呢大家也看到了我们有让大家去选择前端, 后端或者运维. 其实就是因为一个优质的项目需要去分工, 去做到一个前后端分离

- 通用工具栈是都需要去掌握的
操作系统、Docker容器、Git版本控制、npm/pip包管理、还有Copilot等AI工具...[停顿]

这是一个项目可能用到的技术栈, 那如果具体到我一个人身上, 我掌握的工具有哪些是什么样的, 大家可以看这张图:

- 图源
- 人的思维
- 那这张图呢是计算机专业的同学写笔记用到的一些工具, 这一类语言统称标记语言... 
- 我当时是为了说明这些工具的掌握可以大幅提高生产力或者说工作效率, 现代社会人与人之间效率的差异要远大于高中或者说古代时, 那样的学习和工作比较原始. 

- "面对这么多技术, 记住两个黄金准则:
1️⃣ 边做边学:不要等"学全"再动手, 接到需求直接开干, 缺什么补什么
2️⃣ 克制过度设计: 做项目像搭积木, 先完成核心功能, 别在初期纠结完美架构。" 这一点某笔记平台就是一个现成的例子

现在我们知道成为开发者需要有技术栈, 也有一个想法一个项目, 需要去落地. 那问题来了, 我们怎么知道要学什么? 或者说, 计算机这个领域浩如烟海, 怎么去获取你需要的信息? 


=== 信息
我稍微输出一点点价值观的东西, 我们先关注这个信息本身. 那对于物理世界来说, 信息就是一个客观存在, 计算机科学里专门有一门信息论来刻画这个东西. 那对于人的学习来说, 或者人的精神世界来说, 他有一些特殊的性质. 我总结了两点

- 未知不可知, 我们常说的减少信息差就是防止这个情况的出现
- 已知不可逆, 知道的太多未必是好事

我们具体到开发上来看, 第一点
- 信息茧房
- 选择与机会成本

最致命的是技术债务——
一旦选了Angular, 就被迫接受它的整套生态, 想换框架? 代价可能是重写整个项目！"

学习上也有同样的东西, 长期使用 for-loop 循环, 在 pytorch 编程中理解 tensor 操作会变得困难

那技术对于人来说也是这样, 这是一把双刃剑. 学技术很容易沉溺于技术的力量. 那对一个人本身来说, 技术究竟是塑造还是摧残, 这是一个很难回答的问题. 

言归正传, 我们回到技术的学习上, 这就又有一个概念了: 他叫学习曲线
=== 学习曲线
左边这张图是Vim 和 emacs 学习曲线的对比, 他们是两个非常有名的文本编辑器, 可以让你的coding能够离开鼠标. 虽然这两个我都不算很会, 掌握这个的都是非常强的大佬.  

相比平缓的课堂学习, 真实技术栈的学习路径像过山车——
可能昨天卡在Git命令, 今天又被Docker的问题搞疯...

应对策略分两方面:
🔍 广度上:保持好奇心——
- 新工具就像玩具, 拿到就试玩
- 参与任何形式任何媒介的讨论, 关注技术动态, 当然包括微信群. 这个氛围特别的重要, 能够给你节省大量自己去探索的时间, 某笔记平台的团队, 还有隔壁linux社的团队, 非常大的一个特点就是极高频率的交流. 那我相信成为优秀的开发者不会都变成内向含蓄的一个二次元宅男的形象, 与之相反, 计算机和人工智能领域特别锻炼团队协作和交流能力. 
- 千万别死磕教材！[加重语气]

🔬 深度上:
• 首选官方文档
• 边做项目边查资料, 比纯看教程快3倍

那我们接下来的内容呢, 就会关注初学者的学习曲线上一处有一点点陡峭的山坡 Git. 
== Vscode & Github
=== 直击痛点
那这是我们那篇推送上的一个留言, 虽然看ip应该不是我们同学, 但留言特别有代表性.  --- 我们今天来直击痛点. 
=== 简单认识Vscode

=== Github 与 Git
== Git 入门
=== Git 的文件状态
=== 修改网站内容
=== Git 分支
=== Git 工作流
=== 常用语句
=== A
== 下期预告 & 答疑环节